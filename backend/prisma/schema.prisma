datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  role      Role      @default(USER)
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Movie {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  duration    Int
  imageUrl    String?
  showTimes   ShowTime[]
  genres      Genre[]    @relation("MovieGenres")
  genres      MovieGenre[] @relation("MovieGenre")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model ShowTime {
  id        Int       @id @default(autoincrement())
  movieId   Int
  movie     Movie     @relation(fields: [movieId], references: [id])
  startTime DateTime
  endTime   DateTime
  room      String
  price     Float
  seats     Seat[]
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Seat {
  id         Int      @id @default(autoincrement())
  number     String
  showTimeId Int
  showTime   ShowTime @relation(fields: [showTimeId], references: [id])
  status     Status   @default(AVAILABLE)
  bookingId  Int?
  booking    Booking? @relation(fields: [bookingId], references: [id])
}

model Booking {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  showTimeId Int
  showTime   ShowTime @relation(fields: [showTimeId], references: [id])
  seats      Seat[]
  totalPrice Float
  status     BookingStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Genre {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  movies    Movie[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MovieGenre {
  id        Int      @id @default(autoincrement())
  movieId   Int
  genreId   Int
  movie     Movie    @relation(fields: [movieId], references: [id], name: "MovieGenre")
  genre     Genre    @relation(fields: [genreId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id         Int      @id @default(autoincrement())
  userId     Int
  movieId    Int
  user       User     @relation(fields: [userId], references: [id])
  movie      Movie    @relation(fields: [movieId], references: [id])
  rating     Int      @default(0)
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Promotion {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  discount   Float
  startDate  DateTime
  endDate    DateTime
  bookings   Booking[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Payment {
  id          Int       @id @default(autoincrement())
  bookingId   Int
  booking     Booking   @relation(fields: [bookingId], references: [id])
  amount      Float
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum Role {
  USER
  ADMIN
}

enum Status {
  AVAILABLE
  BOOKED
  RESERVED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}